#!/usr/bin/env node

// Copyright 2018 The Home Depot, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

'use strict';

const _ = require('lodash');
const request = require('request-promise');
const validate = require('../src/validate');
const env = process.env;
const stdin = process.stdin;

stdin.setEncoding('utf8');

let inputChunks = [];
stdin.on('data', function (chunk) {
    inputChunks.push(chunk);
});

stdin.on('end', function () {
    let input = inputChunks.join('');

    let resourceConfig;
    try {
        resourceConfig = JSON.parse(input);
        validate.env(process.env);
        validate.config(resourceConfig);
    } catch(error) {
        logInfo(`Error: ${error.message}`);
        process.exit(1);
    }

    const source = resourceConfig.source || {};
    const params = resourceConfig.params || {};

    processWebhook(source, params);
});

async function processWebhook(source, params) {

    const webhookEndpoint = `${source.github_api}/repos/${params.org}/${params.repo}/hooks`;
    const url = encodeURI(`${env.ATC_EXTERNAL_URL}/api/v1/teams/${env.BUILD_TEAM_NAME}/pipelines/${env.BUILD_PIPELINE_NAME}/resources/${params.resource_name}/check/webhook?webhook_token=${params.webhook_token}`);

    logInfo(`Webhook location: ${webhookEndpoint}\n` +
            `Target Concourse resource: ${url}\n`);

    let config = { 
        'url': url,
        'content-type': 'json'
    };
    
    let body = {
        'name': 'web',  // NOTE: Github plans to deprecate this field. https://developer.github.com/v3/repos/hooks/#create-a-hook
        'config': config,
        'events': params.events
    };

    const existingHookList = await getExistingHooks(webhookEndpoint, source.github_token);
    const existingHook = existingHookList.find(hook => _.isMatch(hook.config, config));

    switch (params.operation) {
        case 'create':
            if (existingHook == null) {
                createWebhook(webhookEndpoint, 'POST', source.github_token, body);
            } else {
                logInfo('Webhook already exists');
                emit(existingHook);
            }
            break;
        case 'delete':
            if (existingHook == null) {
                logInfo('Webhook does not exist');
                emit({id: Date.now()});
            } else {
                deleteWebhook(webhookEndpoint, existingHook, source.github_token);
            }
            break;
    }
}

function getExistingHooks(webhookEndpoint, githubToken) {
    return callGithub(webhookEndpoint, 'GET', githubToken)
        .then(res => JSON.parse(res.body));
}

function createWebhook(webhookEndpoint, method, githubToken, body) {
    const bodyString = JSON.stringify(body);

    callGithub(webhookEndpoint, method, githubToken, bodyString)
        .then(res => {
            logInfo(`Successfully created webhook: ${res.body}`);
            emit(JSON.parse(res.body));
        })
        .catch(error => {
            logInfo(error.stack);
            process.exit(1);
        });
}

function deleteWebhook(webhookEndpoint, webhook, githubToken) {
    const deleteUri = `${webhookEndpoint}/${webhook.id}`;

    callGithub(deleteUri, 'DELETE', githubToken)
        .then(() => {
            logInfo('Webhook deleted successfully');
            emit(webhook);
        });
}

function callGithub(uri, method, githubToken, body) {
    let options = {
        uri: uri,
        method: method,
        body: body,
        headers: {
            'Accept': 'application/vnd.github.v3+json',
            'Content-Type': 'application/json',
            'Authorization': `token ${githubToken}`,
            'User-Agent': 'node.js'
        },
        resolveWithFullResponse: true
    };

    return request(options)
        .catch(err => {
            logInfo(`Error while calling Github: ${err.name}\n` +
                    `Response Status: ${err.statusCode}\n` +
                    `Message: ${JSON.stringify(JSON.parse(err.error), null, 2)}`);
            if (err.statusCode === 404) {
                logInfo(`Response was 404:\n` +
                        `    Your token's account must be an \'Administrator\' of your repo. ${uri.replace('api.', '').replace('/repos', '').replace('/hooks', '/settings/collaboration')}\n` +
                        `    Additionally, your token must have the \'admin:repo_hook\' scope. https://github.com/settings/tokens/new?scopes=admin:repo_hook`);
            }
            process.exit(1);
        });
}

function emit(result) {
    let output = {
        version: {
            id: result.id.toString()
        }
    };
    logInfo(`Output: ${JSON.stringify(output)}`);

    // Output version to Concourse using stdout
    console.log(JSON.stringify(output, null, 2));

    process.exit(0);
}

function logInfo(message) {
    console.error(message);
}
