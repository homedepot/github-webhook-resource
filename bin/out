#!/usr/bin/env node

// Copyright 2018 The Home Depot, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

'use strict'

const request = require('request-promise');
const env = process.env;
const stdin = process.stdin;

stdin.setEncoding('utf8');

let inputChunks = [];
stdin.on('data', function (chunk) {
    inputChunks.push(chunk);
});

stdin.on('end', function () {
    let inputJSON = inputChunks.join('');

    let parsedData;
    try {
        parsedData = JSON.parse(inputJSON);
    } catch(error) {
        logInfo('Error:', error.stack);
        process.exit(1);
    }

    logInfo(JSON.stringify(parsedData));

    validateInput(parsedData);

    const source = parsedData.source || {};
    const params = parsedData.params || {};

    processWebhook(source, params);
});

async function processWebhook(source, params) {
    const githubApi = source.github_api; 
    const githubToken = source.github_token;
    const org = params.org;
    const repo = params.repo;

    const operation = params.operation.toLowerCase();
    const resourceName = params.resource_name;
    const webhookToken = params.webhook_token;
    const webhookEndpoint = `${githubApi}/repos/${org}/${repo}/hooks`;
    logInfo(`Using webhook endpoint: ${webhookEndpoint}`);

    let url = `${env.ATC_EXTERNAL_URL}/api/v1/teams/${env.BUILD_TEAM_NAME}/pipelines/${env.BUILD_PIPELINE_NAME}/resources/${resourceName}/check/webhook?webhook_token=${webhookToken}`;
    let uri = encodeURI(url);
    logInfo(`Setting Github webhook for ${uri}`);

    let config = { 
        'url': uri,
        'content-type': 'json'
    };
    
    let body = {
        'name': 'web',  // NOTE: Github plans to deprecate this field. https://developer.github.com/v3/repos/hooks/#create-a-hook
        'config': config
    };

    const existingHookList = await getExistingHooks(webhookEndpoint, githubToken);
    const existingHook = existingHookList.find(hook => hook.config.url === uri);

    switch (operation) {
        case 'create':
            if (existingHook == null) {
                createWebhook(webhookEndpoint, 'POST', githubToken, body);
            } else {
                logInfo('Webhook already exists');
                emit(existingHook);
            }
            break;
        case 'delete':
            if (existingHook == null) {
                logInfo('Webhook does not exist');
                emit({id: Date.now()});
            } else {
                deleteWebhook(webhookEndpoint, existingHook, githubToken);
            }
            break;
    }
};

function getExistingHooks(webhookEndpoint, githubToken) {
    return callGithub(webhookEndpoint, 'GET', githubToken)
        .then(res => JSON.parse(res.body));
};

function createWebhook(webhookEndpoint, method, githubToken, body) {
    const bodyString = JSON.stringify(body);

    callGithub(webhookEndpoint, method, githubToken, bodyString)
        .then(res => {
            logInfo(`Successfully created webhook: ${res.body}`);
            emit(JSON.parse(res.body));
        })
        .catch(error => {
            logInfo(error.stack);
            process.exit(1);
        });
}

function deleteWebhook(webhookEndpoint, webhook, githubToken) {
    const deleteUri = `${webhookEndpoint}/${webhook.id}`;

    callGithub(deleteUri, 'DELETE', githubToken)
        .then(() => {
            logInfo('Webhook deleted successfully');
            emit(webhook);
        });
}

function callGithub(uri, method, githubToken, body) {
    let options = {
        uri: uri,
        method: method,
        body: body,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `token ${githubToken}`,
          'User-Agent': 'node.js'
        },
        resolveWithFullResponse: true
    };

    return request(options)
        .catch(err => {
            logInfo(`Error while contacting Github: ${err.name}\nResponse Status: ${err.statusCode}, Message: ${err.error}`);
            if (err.statusCode === 404) {
                logInfo(`Response was 404:\n` +
                `    Your token's account must be an \'Administrator\' of your repo. ${uri.replace('api.', '').replace('/repos', '').replace('/hooks', '/settings/collaboration')}\n` +
                `    Additionally, your token must have the \'admin:repo_hook\' scope. https://github.com/settings/tokens/new?scopes=admin:repo_hook`);
            }
            process.exit(1);
        });
}

function emit(result) {
    let output = {
        version: {
            id: result.id.toString()
        }
    }
    logInfo(`Output: ${JSON.stringify(output)}`);

    // Output version to Concourse using stdout
    console.log(JSON.stringify(output, null, 2));

    process.exit(0);
}

function logInfo(message) {
    console.error(message);
}

function validateInput(parsedData) {
    const validOperations = ['create', 'delete'];
    
    let isValid = true;
    isValid = validateItem(isValid, process, 'env', 'ATC_EXTERNAL_URL');
    isValid = validateItem(isValid, process, 'env', 'BUILD_TEAM_NAME');
    isValid = validateItem(isValid, process, 'env', 'BUILD_PIPELINE_NAME');
    isValid = validateItem(isValid, parsedData, 'source', 'github_api');
    isValid = validateItem(isValid, parsedData, 'source', 'github_token');
    isValid = validateItem(isValid, parsedData, 'params', 'org');
    isValid = validateItem(isValid, parsedData, 'params', 'repo');
    isValid = validateItem(isValid, parsedData, 'params', 'resource_name');
    isValid = validateItem(isValid, parsedData, 'params', 'webhook_token');
    isValid = validateItem(isValid, parsedData, 'params', 'operation', validOperations);

    if (!isValid) process.exit(1);
}

function validateItem(validState, configObject, configItem, property, validValues) {

    if (!configObject[configItem][property]) {
        console.error(`Invalid configuration: ${configItem}.${property} is required`);
        return false;
    } else if (validValues && !validValues.includes(configObject[configItem][property].toLowerCase())) {
        console.error(`Unsupported configuration: ${configItem}.${property} = ${configObject[configItem][property]}`);
        return false;
    }
    return validState;
}   